{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///C:/todopraksa/src/app/todoiman/todoapi.js"],"sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst uri = 'mongodb://localhost:27017'; \r\nconst client = new MongoClient(uri);\r\n\r\nasync function connect() \r\n{\r\n  try \r\n  {\r\n    await client.connect();\r\n    console.log('Connected to MongoDB');\r\n    const db = client.db('ToDoListDB');\r\n    return db; \r\n  } \r\n  catch (err) \r\n  {\r\n    console.error('Connection error:', err);\r\n  }\r\n}\r\nconnect();\r\n\r\nasync function getTodos()\r\n{\r\n    const db=await connect();\r\n    return await db.collection('todos').find().toArray();\r\n\r\n    return todos.map(todo => \r\n    ({\r\n        ...todo,\r\n        _id: todo._id.toString(), \r\n    }));\r\n}\r\n\r\nasync function createTodo(data)\r\n{\r\n    const db=await connect();\r\n    const result=await db.collection('todos').insertOne(data);\r\n    return {_id: result.insertedId.toString(), ...data};\r\n}\r\n\r\nasync function updateTodo(id, data)\r\n{\r\n    const db=await connect();\r\n\r\n    await db.collection('todos').updateOne\r\n    (\r\n        {_id:new ObjectId(id)},\r\n        {$set:data}\r\n    );\r\n    return await db.collection('todos').findOne({_id:new ObjectId(id)});\r\n}\r\n\r\nasync function deleteTodo(id)\r\n{\r\n    const db=await connect();\r\n    await db.collection('todos').deleteOne({_id:new ObjectId(id)});\r\n}\r\n\r\nexport\r\n{\r\n    getTodos,\r\n    createTodo,\r\n    updateTodo,\r\n    deleteTodo\r\n};\r\n"],"names":[],"mappings":";;;;;;AAAA;;AAEA,MAAM,MAAM;AACZ,MAAM,SAAS,IAAI,0JAAA,CAAA,cAAW,CAAC;AAE/B,eAAe;IAEb,IACA;QACE,MAAM,OAAO,OAAO;QACpB,QAAQ,GAAG,CAAC;QACZ,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,OAAO;IACT,EACA,OAAO,KACP;QACE,QAAQ,KAAK,CAAC,qBAAqB;IACrC;AACF;AACA;AAEA,eAAe;IAEX,MAAM,KAAG,MAAM;IACf,OAAO,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,GAAG,OAAO;;;AAOtD;AAEA,eAAe,WAAW,IAAI;IAE1B,MAAM,KAAG,MAAM;IACf,MAAM,SAAO,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;IACpD,OAAO;QAAC,KAAK,OAAO,UAAU,CAAC,QAAQ;QAAI,GAAG,IAAI;IAAA;AACtD;AAEA,eAAe,WAAW,EAAE,EAAE,IAAI;IAE9B,MAAM,KAAG,MAAM;IAEf,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAElC;QAAC,KAAI,IAAI,0JAAA,CAAA,WAAQ,CAAC;IAAG,GACrB;QAAC,MAAK;IAAI;IAEd,OAAO,MAAM,GAAG,UAAU,CAAC,SAAS,OAAO,CAAC;QAAC,KAAI,IAAI,0JAAA,CAAA,WAAQ,CAAC;IAAG;AACrE;AAEA,eAAe,WAAW,EAAE;IAExB,MAAM,KAAG,MAAM;IACf,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;QAAC,KAAI,IAAI,0JAAA,CAAA,WAAQ,CAAC;IAAG;AAChE","debugId":null}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///C:/todopraksa/src/pages/api/todos/%5Bid%5D.js"],"sourcesContent":["\nimport { updateTodo, deleteTodo } from '../../../app/todoiman/todoapi.js';\n\nexport default async function handler(req, res) \n{\n    const { id } = req.query;\n\n  if (req.method === 'PUT') \n  {\n      try \n      {\n        const updated = await updateTodo(id, req.body);\n        res.status(200).json(updated);\n      } \n      catch (err) \n      {\n        res.status(500).json({ error: 'Failed to update todo' });\n      }\n  }\n\n  else if (req.method === 'DELETE') \n  {\n    try \n    {\n        await deleteTodo(id);\n        res.status(204).end();\n    } \n    \n    catch (err) \n    {\n        res.status(500).json({ error: 'Failed to delete todo' });\n    } \n  } \n  \n  else \n  {\n      res.setHeader('Allow', ['PUT', 'DELETE']);\n      res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n\nimport { updateTodo, deleteTodo } from '../../../app/todoiman/todoapi.js';\n\nexport default async function handler(req, res) \n{\n    const { id } = req.query;\n\n  if (req.method === 'PUT') \n  {\n      try \n      {\n        const updated = await updateTodo(id, req.body);\n        res.status(200).json(updated);\n      } \n      catch (err) \n      {\n        res.status(500).json({ error: 'Failed to update todo' });\n      }\n  }\n\n  else if (req.method === 'DELETE') \n  {\n    try \n    {\n        await deleteTodo(id);\n        res.status(204).end();\n    } \n    \n    catch (err) \n    {\n        res.status(500).json({ error: 'Failed to delete todo' });\n    } \n  } \n  \n  else \n  {\n      res.setHeader('Allow', ['PUT', 'DELETE']);\n      res.status(405).json({ error: 'Method not allowed' });\n  }\n}"],"names":[],"mappings":";;;AACA;;AAEe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAE1C,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,KAAK;IAE1B,IAAI,IAAI,MAAM,KAAK,OACnB;QACI,IACA;YACE,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE,IAAI,IAAI,IAAI;YAC7C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QACvB,EACA,OAAO,KACP;YACE,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB;QACxD;IACJ,OAEK,IAAI,IAAI,MAAM,KAAK,UACxB;QACE,IACA;YACI,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE;YACjB,IAAI,MAAM,CAAC,KAAK,GAAG;QACvB,EAEA,OAAO,KACP;YACI,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB;QAC1D;IACF,OAGA;QACI,IAAI,SAAS,CAAC,SAAS;YAAC;YAAO;SAAS;QACxC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IACvD;AACF;;AAIe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAE1C,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,KAAK;IAE1B,IAAI,IAAI,MAAM,KAAK,OACnB;QACI,IACA;YACE,MAAM,UAAU,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE,IAAI,IAAI,IAAI;YAC7C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QACvB,EACA,OAAO,KACP;YACE,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB;QACxD;IACJ,OAEK,IAAI,IAAI,MAAM,KAAK,UACxB;QACE,IACA;YACI,MAAM,CAAA,GAAA,0HAAA,CAAA,aAAU,AAAD,EAAE;YACjB,IAAI,MAAM,CAAC,KAAK,GAAG;QACvB,EAEA,OAAO,KACP;YACI,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB;QAC1D;IACF,OAGA;QACI,IAAI,SAAS,CAAC,SAAS;YAAC;YAAO;SAAS;QACxC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IACvD;AACF","debugId":null}}]
}